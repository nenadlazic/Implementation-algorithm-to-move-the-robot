
void MainWindow::loadFromFile(){
    qDebug()<<"loadFromFile called";

    QPen pen;
    QBrush brush;

    QString path = QFileDialog::getOpenFileName(this,
        tr("Open file"), "/home/", tr("Text Files (*.txt)"));
    qDebug()<<"PATH:"<<path;

    QFile inputFile(path);
    if (inputFile.open(QIODevice::ReadOnly))
    {
        QTextStream in(&inputFile);

        QString line = in.readLine();
        start = qMakePair(line.split(" ").at(0).toInt(),line.split(" ").at(1).toInt());
        line = in.readLine();
        target = qMakePair(line.split(" ").at(0).toInt(),-(line.split(" ").at(1).toInt()));
        qDebug()<<"start and target point";
        qDebug()<<start.first<<" "<<start.second<<" "<<target.first<<" "<<target.second;

        pen.setColor(Qt::yellow);
        pen.setWidth(3);
        brush.setColor(Qt::blue);
        brush.setStyle(Qt::SolidPattern);

        robot = scene.addEllipse(current.first-8,current.second-8,16,16, pen, brush);
        brush.setColor(Qt::red);
        goal = scene.addEllipse(target.first-8,target.second-8,16,16, pen, brush);

        pen.setColor(Qt::red);
        pen.setWidth(2);
        brush.setColor(Qt::green);
        brush.setStyle(Qt::SolidPattern);

        UIMW->graphicsView->setScene(&scene);
        UIMW->graphicsView->update();

        while (!in.atEnd())
        {
            line = in.readLine();
            qDebug()<<line;

            //read first word in line krug,elipsa,trougao
            int typeObstaales = line.split(" ").at(0).toInt();

            switch (typeObstaales) {
                case 1:
                {
                qDebug()<<"kruuuuuuuug";
                    int x = line.split(" ").at(1).toInt();
                    int y = -(line.split(" ").at(2).toInt());
                    int r = line.split(" ").at(3).toInt();
                    qDebug()<<x<<" "<<y<<" "<<r;


                    QGraphicsEllipseItem *elipse = scene.addEllipse(x-r/2,y-r/2,r,r, pen, brush);
                    scene.update();

                    listGraphItems.push_back(elipse);

                    break;
                }
                case 2:
                {
                    int x = line.split(" ").at(1).toInt();
                    int y = -(line.split(" ").at(2).toInt());
                    int a = line.split(" ").at(3).toInt();
                    int b = line.split(" ").at(4).toInt();

                    qDebug()<<x<<" "<<y<<" "<<a<<" "<<b;


                    QGraphicsEllipseItem *elipse = scene.addEllipse(x-a/2,y-b/2,a,b, pen, brush);
                    scene.update();

                    listGraphItems.push_back(elipse);

                    break;
                }
                case 3:{
                    int x1 = line.split(" ").at(1).toInt();
                    int y1 = -(line.split(" ").at(2).toInt());
                    int x2 = line.split(" ").at(3).toInt();
                    int y2 = -(line.split(" ").at(4).toInt());
                    int x3 = line.split(" ").at(5).toInt();
                    int y3 = -(line.split(" ").at(6).toInt());

                    QPolygonF Triangle;
                    Triangle.append(QPointF(x1,y1));
                    Triangle.append(QPointF(x2,y2));
                    Triangle.append(QPointF(x3,y3));
                    Triangle.append(QPointF(x1,y1));

                    QGraphicsPolygonItem *polygon = scene.addPolygon(Triangle,pen, brush);

                    scene.update();
                    listGraphItems.push_back(polygon);
                    break;
                }
                case 4:{
                    int x1 = line.split(" ").at(1).toInt();
                    int y1 = -(line.split(" ").at(2).toInt());
                    int x2 = line.split(" ").at(3).toInt();
                    int y2 = -(line.split(" ").at(4).toInt());
                    int x3 = line.split(" ").at(5).toInt();
                    int y3 = -(line.split(" ").at(6).toInt());
                    int x4 = line.split(" ").at(7).toInt();
                    int y4 = -(line.split(" ").at(8).toInt());

                    QPolygonF Triangle;
                    Triangle.append(QPointF(x1,y1));
                    Triangle.append(QPointF(x2,y2));
                    Triangle.append(QPointF(x3,y3));
                    Triangle.append(QPointF(x4,y4));
                    Triangle.append(QPointF(x1,y1));

                    QGraphicsPolygonItem *polygon = scene.addPolygon(Triangle,pen, brush);

                    scene.update();
                    listGraphItems.push_back(polygon);
                    break;
                }
                case 5:{
                    int x1 = line.split(" ").at(1).toInt();
                    int y1 = -(line.split(" ").at(2).toInt());
                    int x2 = line.split(" ").at(3).toInt();
                    int y2 = -(line.split(" ").at(4).toInt());
                    int x3 = line.split(" ").at(5).toInt();
                    int y3 = -(line.split(" ").at(6).toInt());
                    int x4 = line.split(" ").at(7).toInt();
                    int y4 = -(line.split(" ").at(8).toInt());
                    int x5 = line.split(" ").at(9).toInt();
                    int y5 = -(line.split(" ").at(10).toInt());

                    QPolygonF Triangle;
                    Triangle.append(QPointF(x1,y1));
                    Triangle.append(QPointF(x2,y2));
                    Triangle.append(QPointF(x3,y3));
                    Triangle.append(QPointF(x4,y4));
                    Triangle.append(QPointF(x5,y5));
                    Triangle.append(QPointF(x1,y1));

                    QGraphicsPolygonItem *polygon = scene.addPolygon(Triangle,pen, brush);

                    scene.update();
                    listGraphItems.push_back(polygon);
                    break;
                }
                default:
                {
                    qDebug()<<"Error";
                    break;
                }
            }
        }
        inputFile.close();

        prevStep = 1;
        current = qMakePair(start.first, start.second);
        //start->target vector
        directionVector = qMakePair(target.first-start.first, target.second-start.second);
        qreal tmp1 = qPow(directionVector.first,2) + qPow(directionVector.second,2);
        double tmp = qSqrt(tmp1);
        //the unit direction vector
        unitDirectionVector = qMakePair(directionVector.first/tmp,directionVector.second/tmp);

        timer = new QTimer();
        timer->start(80);
    }

}

